
[Non strict with failures:report - 1]
components:
- containerImage: ${REGISTRY}/acceptance/does-not-exist
  name: ""
  source: {}
  success: false
  violations:
  - metadata:
      code: builtin.image.accessible
      description: The image URL is available and accessible.
      title: Image URL is accessible
    msg: 'Image URL is not accessible: HEAD http://${REGISTRY}/v2/acceptance/does-not-exist/manifests/latest:
      unexpected status code 404 Not Found (HEAD responses have no body, use GET for
      details)'
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
${__known_PUBLIC_KEY}
policy:
  publicKey: |
${____known_PUBLIC_KEY}
success: false

---

[Strict with failures:report - 1]
components:
- containerImage: ${REGISTRY}/acceptance/does-not-exist
  name: ""
  source: {}
  success: false
  violations:
  - metadata:
      code: builtin.image.accessible
      description: The image URL is available and accessible.
      title: Image URL is accessible
    msg: 'Image URL is not accessible: HEAD http://${REGISTRY}/v2/acceptance/does-not-exist/manifests/latest:
      unexpected status code 404 Not Found (HEAD responses have no body, use GET for
      details)'
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
${__known_PUBLIC_KEY}
policy:
  publicKey: |
${____known_PUBLIC_KEY}
success: false

---

[Non strict with warnings:report - 1]
components:
- attestations:
  - predicateBuildType: https://tekton.dev/attestations/chains/pipelinerun@v2
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: ""
      sig: ${ATTESTATION_SIGNATURE_acceptance/non-strict-with-warnings}
    type: https://in-toto.io/Statement/v0.1
  containerImage: ${REGISTRY}/acceptance/non-strict-with-warnings@sha256:${REGISTRY_acceptance/non-strict-with-warnings:latest_DIGEST}
  name: ""
  signatures:
  - keyid: ""
    sig: ${IMAGE_SIGNATURE_acceptance/non-strict-with-warnings}
  source: {}
  success: true
  successes:
  - metadata:
      code: builtin.attestation.signature_check
      description: The attestation signature matches available signing materials.
      title: Attestation signature check passed
    msg: Pass
  - metadata:
      code: builtin.attestation.syntax_check
      description: The attestation has correct syntax.
      title: Attestation syntax check passed
    msg: Pass
  - metadata:
      code: builtin.image.signature_check
      description: The image signature matches available signing materials.
      title: Image signature check passed
    msg: Pass
  - metadata:
      code: test.no_skipped_tests
      collections:
      - redhat
      depends_on:
      - test.test_data_found
      description: Produce a violation if any tests have their result set to "SKIPPED".
        A skipped result means a pre-requirement for executing the test was not met,
        e.g. a license key for executing a scanner was not provided. The result type
        is configurable by the "skipped_tests_results" key in the rule data.
      effective_on: "${TIMESTAMP}"
      title: No tests were skipped
    msg: Pass
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
${__known_PUBLIC_KEY}
policy:
  configuration:
    include:
    - test.no_skipped_tests
  publicKey: |
${____known_PUBLIC_KEY}
  sources:
  - policy:
    - github.com/enterprise-contract/ec-policies//policy
success: true

---

[Strict with warnings:report - 1]
components:
- attestations:
  - predicateBuildType: https://tekton.dev/attestations/chains/pipelinerun@v2
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: ""
      sig: ${ATTESTATION_SIGNATURE_acceptance/strict-with-warnings}
    type: https://in-toto.io/Statement/v0.1
  containerImage: ${REGISTRY}/acceptance/strict-with-warnings@sha256:${REGISTRY_acceptance/strict-with-warnings:latest_DIGEST}
  name: ""
  signatures:
  - keyid: ""
    sig: ${IMAGE_SIGNATURE_acceptance/strict-with-warnings}
  source: {}
  success: true
  successes:
  - metadata:
      code: builtin.attestation.signature_check
      description: The attestation signature matches available signing materials.
      title: Attestation signature check passed
    msg: Pass
  - metadata:
      code: builtin.attestation.syntax_check
      description: The attestation has correct syntax.
      title: Attestation syntax check passed
    msg: Pass
  - metadata:
      code: builtin.image.signature_check
      description: The image signature matches available signing materials.
      title: Image signature check passed
    msg: Pass
  - metadata:
      code: test.no_skipped_tests
      collections:
      - redhat
      depends_on:
      - test.test_data_found
      description: Produce a violation if any tests have their result set to "SKIPPED".
        A skipped result means a pre-requirement for executing the test was not met,
        e.g. a license key for executing a scanner was not provided. The result type
        is configurable by the "skipped_tests_results" key in the rule data.
      effective_on: "${TIMESTAMP}"
      title: No tests were skipped
    msg: Pass
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
${__known_PUBLIC_KEY}
policy:
  configuration:
    include:
    - test.no_skipped_tests
  publicKey: |
${____known_PUBLIC_KEY}
  sources:
  - policy:
    - github.com/enterprise-contract/ec-policies//policy
success: true

---

[Golden container image:report - 1]
components:
- attestations:
  - predicateBuildType: tekton.dev/v1beta1/TaskRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIHFVZeVR59n9UvN1dwF9Lh3Gv8XWLPDPIIJcnQ8e3TtvAiEA0z/5v6ggvmQyQ1EnYTJo9rwxOYuve4th4P/0639orLg=
    type: https://in-toto.io/Statement/v0.1
  - predicateBuildType: tekton.dev/v1beta1/PipelineRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIQClx1zvZGvyRu5gCHiC+oWVZTmWJGQlocSZMnzx/5omZAIgUiLQuMm+USYE+H0PDn/xPSVVQjkhWjDc3fulkxVzlC0=
    type: https://in-toto.io/Statement/v0.1
  - predicateBuildType: tekton.dev/v1beta1/PipelineRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIGS176zN5aoorLQMukjoCkHm7ocu7UhnKXLhzEdsgp4BAiEAviub3Lf4thLmSTU6ZqnEjw02kkrb9LKBBa1t8hVgAM4=
    type: https://in-toto.io/Statement/v0.1
  containerImage: quay.io/hacbs-contract-demo/golden-container@sha256:e76a4ae9dd8a52a0d191fd34ca133af5b4f2609536d32200a4a40a09fdc93a0d
  name: ""
  signatures:
  - keyid: ""
    sig: MEUCIFPod1d9HhGt+TEQPG4j+LINjkifCFFOFrE4jbkvexGGAiEAqSp3ROZUsIOwWro6Tv+lRiR7sdMR0U6Crs1ISuQhHtA=
  source: {}
  success: true
  successes:
  - metadata:
      code: builtin.attestation.signature_check
      description: The attestation signature matches available signing materials.
      title: Attestation signature check passed
    msg: Pass
  - metadata:
      code: builtin.attestation.syntax_check
      description: The attestation has correct syntax.
      title: Attestation syntax check passed
    msg: Pass
  - metadata:
      code: builtin.image.signature_check
      description: The image signature matches available signing materials.
      title: Image signature check passed
    msg: Pass
  - metadata:
      code: slsa_provenance_available.allowed_predicate_types_provided
      collections:
      - minimal
      - slsa3
      - redhat
      - policy_data
      description: Confirm the `allowed_predicate_types` rule data was provided, since
        it is required by the policy rules in this package.
      title: Allowed predicate types provided
    msg: Pass
  - metadata:
      code: slsa_provenance_available.attestation_predicate_type_accepted
      collections:
      - minimal
      - slsa3
      - redhat
      depends_on:
      - attestation_type.known_attestation_type
      description: Verify that the predicateType field of the attestation indicates
        the in-toto SLSA Provenance format was used to attest the PipelineRun.
      title: Expected attestation predicate type found
    msg: Pass
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
  -----BEGIN PUBLIC KEY-----
  MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp
  zN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==
  -----END PUBLIC KEY-----
policy:
  configuration:
    include:
    - slsa_provenance_available
  publicKey: |-
    -----BEGIN PUBLIC KEY-----
    MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp
    zN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==
    -----END PUBLIC KEY-----
  sources:
  - policy:
    - github.com/enterprise-contract/ec-policies//policy
success: true

---

[Initialize TUF fails:report - 1]
${TIMESTAMP} Skipping step because a previous step failed

---

[Initialize TUF fails:initialize-tuf - 1]
Initializing TUF root...
Error: Get "http://tuf.invalid/root.json": dial tcp: lookup tuf.invalid on 10.96.0.10:53: no such host
main.go:74: error during command execution: Get "http://tuf.invalid/root.json": dial tcp: lookup tuf.invalid on 10.96.0.10:53: no such host

---

[Initialize TUF succeeds:report - 1]
components:
- attestations:
  - predicateBuildType: tekton.dev/v1beta1/TaskRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIHFVZeVR59n9UvN1dwF9Lh3Gv8XWLPDPIIJcnQ8e3TtvAiEA0z/5v6ggvmQyQ1EnYTJo9rwxOYuve4th4P/0639orLg=
    type: https://in-toto.io/Statement/v0.1
  - predicateBuildType: tekton.dev/v1beta1/PipelineRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIQClx1zvZGvyRu5gCHiC+oWVZTmWJGQlocSZMnzx/5omZAIgUiLQuMm+USYE+H0PDn/xPSVVQjkhWjDc3fulkxVzlC0=
    type: https://in-toto.io/Statement/v0.1
  - predicateBuildType: tekton.dev/v1beta1/PipelineRun
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE
      sig: MEUCIGS176zN5aoorLQMukjoCkHm7ocu7UhnKXLhzEdsgp4BAiEAviub3Lf4thLmSTU6ZqnEjw02kkrb9LKBBa1t8hVgAM4=
    type: https://in-toto.io/Statement/v0.1
  containerImage: quay.io/hacbs-contract-demo/golden-container@sha256:e76a4ae9dd8a52a0d191fd34ca133af5b4f2609536d32200a4a40a09fdc93a0d
  name: ""
  signatures:
  - keyid: ""
    sig: MEUCIFPod1d9HhGt+TEQPG4j+LINjkifCFFOFrE4jbkvexGGAiEAqSp3ROZUsIOwWro6Tv+lRiR7sdMR0U6Crs1ISuQhHtA=
  source: {}
  success: true
  successes:
  - metadata:
      code: builtin.attestation.signature_check
      description: The attestation signature matches available signing materials.
      title: Attestation signature check passed
    msg: Pass
  - metadata:
      code: builtin.attestation.syntax_check
      description: The attestation has correct syntax.
      title: Attestation syntax check passed
    msg: Pass
  - metadata:
      code: builtin.image.signature_check
      description: The image signature matches available signing materials.
      title: Image signature check passed
    msg: Pass
  - metadata:
      code: slsa_provenance_available.allowed_predicate_types_provided
      collections:
      - minimal
      - slsa3
      - redhat
      - policy_data
      description: Confirm the `allowed_predicate_types` rule data was provided, since
        it is required by the policy rules in this package.
      title: Allowed predicate types provided
    msg: Pass
  - metadata:
      code: slsa_provenance_available.attestation_predicate_type_accepted
      collections:
      - minimal
      - slsa3
      - redhat
      depends_on:
      - attestation_type.known_attestation_type
      description: Verify that the predicateType field of the attestation indicates
        the in-toto SLSA Provenance format was used to attest the PipelineRun.
      title: Expected attestation predicate type found
    msg: Pass
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
  -----BEGIN PUBLIC KEY-----
  MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp
  zN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==
  -----END PUBLIC KEY-----
policy:
  configuration:
    include:
    - slsa_provenance_available
  publicKey: |-
    -----BEGIN PUBLIC KEY-----
    MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp
    zN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==
    -----END PUBLIC KEY-----
  sources:
  - policy:
    - github.com/enterprise-contract/ec-policies//policy
success: true

---

[Initialize TUF succeeds:initialize-tuf - 1]
TUF_MIRROR not set. Skipping TUF root initialization.

---

[Initialize TUF fails:results - 1]
{}
---

[Strict with failures:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":0,\"failures\":1,\"warnings\":0,\"result\":\"FAILURE\"}\n"
}
---

[Non strict with failures:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":0,\"failures\":1,\"warnings\":0,\"result\":\"FAILURE\"}\n"
}
---

[Strict with warnings:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":4,\"failures\":0,\"warnings\":0,\"result\":\"SUCCESS\"}\n"
}
---

[Non strict with warnings:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":4,\"failures\":0,\"warnings\":0,\"result\":\"SUCCESS\"}\n"
}
---

[Golden container image:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":5,\"failures\":0,\"warnings\":0,\"result\":\"SUCCESS\"}\n"
}
---

[Initialize TUF succeeds:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":5,\"failures\":0,\"warnings\":0,\"result\":\"SUCCESS\"}\n"
}
---

[Outputs are there:initialize-tuf - 1]
TUF_MIRROR not set. Skipping TUF root initialization.

---

[Outputs are there:report - 1]
components:
- attestations:
  - predicateBuildType: https://tekton.dev/attestations/chains/pipelinerun@v2
    predicateType: https://slsa.dev/provenance/v0.2
    signatures:
    - keyid: ""
      sig: ${ATTESTATION_SIGNATURE_acceptance/okayish}
    type: https://in-toto.io/Statement/v0.1
  containerImage: ${REGISTRY}/acceptance/okayish@sha256:${REGISTRY_acceptance/okayish:latest_DIGEST}
  name: ""
  signatures:
  - keyid: ""
    sig: ${IMAGE_SIGNATURE_acceptance/okayish}
  source: {}
  success: true
  successes:
  - metadata:
      code: builtin.attestation.signature_check
      description: The attestation signature matches available signing materials.
      title: Attestation signature check passed
    msg: Pass
  - metadata:
      code: builtin.attestation.syntax_check
      description: The attestation has correct syntax.
      title: Attestation syntax check passed
    msg: Pass
  - metadata:
      code: builtin.image.signature_check
      description: The image signature matches available signing materials.
      title: Image signature check passed
    msg: Pass
ec-version: ${EC_VERSION}
effective-time: "${TIMESTAMP}"
key: |
${__known_PUBLIC_KEY}
policy:
  publicKey: |
${____known_PUBLIC_KEY}
success: true

---

[Outputs are there:data - 1]
- null

---

[Outputs are there:attestations - 1]
{
  "_type": "https://in-toto.io/Statement/v0.1",
  "predicateType": "https://slsa.dev/provenance/v0.2",
  "subject": [
    {
      "name": "acceptance/okayish",
      "digest": {
        "sha256": "${REGISTRY_acceptance/okayish:latest_DIGEST}"
      }
    }
  ],
  "predicate": {
    "builder": {
      "id": "https://tekton.dev/chains/v2"
    },
    "buildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
    "invocation": {
      "configSource": {}
    }
  }
}
---

[Outputs are there:summary - 1]
{
  "timestamp": "${TIMESTAMP}",
  "namespace": "",
  "successes": 3,
  "failures": 0,
  "warnings": 0,
  "result": "SUCCESS"
}
---

[Outputs are there:assert - 1]
true
---

[Outputs are there:results - 1]
{
  "TEST_OUTPUT": "{\"timestamp\":\"${TIMESTAMP}\",\"namespace\":\"\",\"successes\":3,\"failures\":0,\"warnings\":0,\"result\":\"SUCCESS\"}\n"
}
---

[Strict with failures:report-json - 1]
{
  "success": false,
  "components": [
    {
      "name": "",
      "containerImage": "${REGISTRY}/acceptance/does-not-exist",
      "source": {},
      "violations": [
        {
          "msg": "Image URL is not accessible: HEAD http://${REGISTRY}/v2/acceptance/does-not-exist/manifests/latest: unexpected status code 404 Not Found (HEAD responses have no body, use GET for details)",
          "metadata": {
            "code": "builtin.image.accessible",
            "description": "The image URL is available and accessible.",
            "title": "Image URL is accessible"
          }
        }
      ],
      "success": false
    }
  ],
  "key": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWgPQT7oJ2S9eTddeLwXKFuo6BPbh\ndMBvB8lZc+MCo5uf1PyAoq6/a/kFqNO2PuDguENYLPNqS4EwcePLbDQlEQ==\n-----END PUBLIC KEY-----\n",
  "policy": {
    "publicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEWgPQT7oJ2S9eTddeLwXKFuo6BPbh\ndMBvB8lZc+MCo5uf1PyAoq6/a/kFqNO2PuDguENYLPNqS4EwcePLbDQlEQ==\n-----END PUBLIC KEY-----\n"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Non strict with failures:report-json - 1]
{
  "success": false,
  "components": [
    {
      "name": "",
      "containerImage": "${REGISTRY}/acceptance/does-not-exist",
      "source": {},
      "violations": [
        {
          "msg": "Image URL is not accessible: HEAD http://${REGISTRY}/v2/acceptance/does-not-exist/manifests/latest: unexpected status code 404 Not Found (HEAD responses have no body, use GET for details)",
          "metadata": {
            "code": "builtin.image.accessible",
            "description": "The image URL is available and accessible.",
            "title": "Image URL is accessible"
          }
        }
      ],
      "success": false
    }
  ],
  "key": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAESGhfkUPnmXL2Gw8KmpT7RrSLwi3t\n0IVaODntIj3Lz5F2S0qPp75C5Y+2B2wDr6aKtKBEGoEOPEwY0BODKen/+g==\n-----END PUBLIC KEY-----\n",
  "policy": {
    "publicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAESGhfkUPnmXL2Gw8KmpT7RrSLwi3t\n0IVaODntIj3Lz5F2S0qPp75C5Y+2B2wDr6aKtKBEGoEOPEwY0BODKen/+g==\n-----END PUBLIC KEY-----\n"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Strict with warnings:report-json - 1]
{
  "success": true,
  "components": [
    {
      "name": "",
      "containerImage": "${REGISTRY}/acceptance/strict-with-warnings@sha256:${REGISTRY_acceptance/strict-with-warnings:latest_DIGEST}",
      "source": {},
      "warnings": [
        {
          "msg": "Test \"skipped\" was skipped",
          "metadata": {
            "code": "test.no_skipped_tests",
            "collections": [
              "redhat"
            ],
            "depends_on": [
              "test.test_data_found"
            ],
            "description": "Produce a warning if any tests have their result set to \"SKIPPED\".",
            "solution": "There is a test that was skipped. Make sure that each task with a result named 'TEST_OUTPUT' was not skipped. You can find which test was skipped by examining the 'result' key in the 'TEST_OUTPUT'.",
            "term": "skipped",
            "title": "No tests were skipped"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check",
            "description": "The attestation signature matches available signing materials.",
            "title": "Attestation signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check",
            "description": "The attestation has correct syntax.",
            "title": "Attestation syntax check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check",
            "description": "The image signature matches available signing materials.",
            "title": "Image signature check passed"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/strict-with-warnings}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/strict-with-warnings}"
            }
          ]
        }
      ]
    }
  ],
  "key": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEH5DnqwEI3+1Emku0l2j3Iu1hnxdr\nf3GMYMQxVX2YZnoJPf8uDBCw5Nc8+ieMV8ymoDft0gnhPaycAZF7LMPwLQ==\n-----END PUBLIC KEY-----\n",
  "policy": {
    "sources": [
      {
        "policy": [
          "github.com/enterprise-contract/ec-policies//policy"
        ]
      }
    ],
    "configuration": {
      "include": [
        "test.no_skipped_tests"
      ]
    },
    "publicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEH5DnqwEI3+1Emku0l2j3Iu1hnxdr\nf3GMYMQxVX2YZnoJPf8uDBCw5Nc8+ieMV8ymoDft0gnhPaycAZF7LMPwLQ==\n-----END PUBLIC KEY-----\n"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Non strict with warnings:report-json - 1]
{
  "success": true,
  "components": [
    {
      "name": "",
      "containerImage": "${REGISTRY}/acceptance/non-strict-with-warnings@sha256:${REGISTRY_acceptance/non-strict-with-warnings:latest_DIGEST}",
      "source": {},
      "warnings": [
        {
          "msg": "Test \"skipped\" was skipped",
          "metadata": {
            "code": "test.no_skipped_tests",
            "collections": [
              "redhat"
            ],
            "depends_on": [
              "test.test_data_found"
            ],
            "description": "Produce a warning if any tests have their result set to \"SKIPPED\".",
            "solution": "There is a test that was skipped. Make sure that each task with a result named 'TEST_OUTPUT' was not skipped. You can find which test was skipped by examining the 'result' key in the 'TEST_OUTPUT'.",
            "term": "skipped",
            "title": "No tests were skipped"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check",
            "description": "The attestation signature matches available signing materials.",
            "title": "Attestation signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check",
            "description": "The attestation has correct syntax.",
            "title": "Attestation syntax check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check",
            "description": "The image signature matches available signing materials.",
            "title": "Image signature check passed"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/non-strict-with-warnings}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/non-strict-with-warnings}"
            }
          ]
        }
      ]
    }
  ],
  "key": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAER5ajiJOZnGNbPCF0TUHRUXIytPW7\nXWB6BaZOE4N0DDK4ub7K6Qe9Q6W/YfI/vEZVZYUjFMcZOih2cmY5ddQhWg==\n-----END PUBLIC KEY-----\n",
  "policy": {
    "sources": [
      {
        "policy": [
          "github.com/enterprise-contract/ec-policies//policy"
        ]
      }
    ],
    "configuration": {
      "include": [
        "test.no_skipped_tests"
      ]
    },
    "publicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAER5ajiJOZnGNbPCF0TUHRUXIytPW7\nXWB6BaZOE4N0DDK4ub7K6Qe9Q6W/YfI/vEZVZYUjFMcZOih2cmY5ddQhWg==\n-----END PUBLIC KEY-----\n"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Golden container image:report-json - 1]
{
  "success": true,
  "components": [
    {
      "name": "",
      "containerImage": "quay.io/hacbs-contract-demo/golden-container@sha256:e76a4ae9dd8a52a0d191fd34ca133af5b4f2609536d32200a4a40a09fdc93a0d",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check",
            "description": "The attestation signature matches available signing materials.",
            "title": "Attestation signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check",
            "description": "The attestation has correct syntax.",
            "title": "Attestation syntax check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check",
            "description": "The image signature matches available signing materials.",
            "title": "Image signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "slsa_provenance_available.attestation_predicate_type_accepted",
            "collections": [
              "minimal",
              "slsa1",
              "slsa2",
              "slsa3",
              "redhat"
            ],
            "depends_on": [
              "attestation_type.known_attestation_type"
            ],
            "description": "Verify that the predicateType field of the attestation indicates the in-toto SLSA Provenance format was used to attest the PipelineRun.",
            "title": "Expected attestation predicate type found"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "MEUCIFPod1d9HhGt+TEQPG4j+LINjkifCFFOFrE4jbkvexGGAiEAqSp3ROZUsIOwWro6Tv+lRiR7sdMR0U6Crs1ISuQhHtA="
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "tekton.dev/v1beta1/TaskRun",
          "signatures": [
            {
              "keyid": "SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE",
              "sig": "MEUCIHFVZeVR59n9UvN1dwF9Lh3Gv8XWLPDPIIJcnQ8e3TtvAiEA0z/5v6ggvmQyQ1EnYTJo9rwxOYuve4th4P/0639orLg="
            }
          ]
        },
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "tekton.dev/v1beta1/PipelineRun",
          "signatures": [
            {
              "keyid": "SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE",
              "sig": "MEUCIQClx1zvZGvyRu5gCHiC+oWVZTmWJGQlocSZMnzx/5omZAIgUiLQuMm+USYE+H0PDn/xPSVVQjkhWjDc3fulkxVzlC0="
            }
          ]
        },
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "tekton.dev/v1beta1/PipelineRun",
          "signatures": [
            {
              "keyid": "SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE",
              "sig": "MEUCIGS176zN5aoorLQMukjoCkHm7ocu7UhnKXLhzEdsgp4BAiEAviub3Lf4thLmSTU6ZqnEjw02kkrb9LKBBa1t8hVgAM4="
            }
          ]
        }
      ]
    }
  ],
  "key": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp\nzN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==\n-----END PUBLIC KEY-----\n",
  "policy": {
    "sources": [
      {
        "policy": [
          "github.com/enterprise-contract/ec-policies//policy"
        ]
      }
    ],
    "configuration": {
      "include": [
        "slsa_provenance_available"
      ]
    },
    "publicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp\nzN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==\n-----END PUBLIC KEY-----"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Initialize TUF succeeds:report-json - 1]
{
  "success": true,
  "components": [
    {
      "name": "",
      "containerImage": "quay.io/hacbs-contract-demo/golden-container@sha256:e76a4ae9dd8a52a0d191fd34ca133af5b4f2609536d32200a4a40a09fdc93a0d",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check",
            "description": "The attestation signature matches available signing materials.",
            "title": "Attestation signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check",
            "description": "The attestation has correct syntax.",
            "title": "Attestation syntax check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check",
            "description": "The image signature matches available signing materials.",
            "title": "Image signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "slsa_provenance_available.attestation_predicate_type_accepted",
            "collections": [
              "minimal",
              "slsa1",
              "slsa2",
              "slsa3",
              "redhat"
            ],
            "depends_on": [
              "attestation_type.known_attestation_type"
            ],
            "description": "Verify that the predicateType field of the attestation indicates the in-toto SLSA Provenance format was used to attest the PipelineRun.",
            "title": "Expected attestation predicate type found"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "MEUCIFPod1d9HhGt+TEQPG4j+LINjkifCFFOFrE4jbkvexGGAiEAqSp3ROZUsIOwWro6Tv+lRiR7sdMR0U6Crs1ISuQhHtA="
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "tekton.dev/v1beta1/TaskRun",
          "signatures": [
            {
              "keyid": "SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE",
              "sig": "MEUCIHFVZeVR59n9UvN1dwF9Lh3Gv8XWLPDPIIJcnQ8e3TtvAiEA0z/5v6ggvmQyQ1EnYTJo9rwxOYuve4th4P/0639orLg="
            }
          ]
        },
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "tekton.dev/v1beta1/PipelineRun",
          "signatures": [
            {
              "keyid": "SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE",
              "sig": "MEUCIQClx1zvZGvyRu5gCHiC+oWVZTmWJGQlocSZMnzx/5omZAIgUiLQuMm+USYE+H0PDn/xPSVVQjkhWjDc3fulkxVzlC0="
            }
          ]
        },
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "tekton.dev/v1beta1/PipelineRun",
          "signatures": [
            {
              "keyid": "SHA256:RHajkr+wMEtGfT2CRFrQEhg/8MY2bDLXVg3F8IuI5nE",
              "sig": "MEUCIGS176zN5aoorLQMukjoCkHm7ocu7UhnKXLhzEdsgp4BAiEAviub3Lf4thLmSTU6ZqnEjw02kkrb9LKBBa1t8hVgAM4="
            }
          ]
        }
      ]
    }
  ],
  "key": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp\nzN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==\n-----END PUBLIC KEY-----\n",
  "policy": {
    "sources": [
      {
        "policy": [
          "github.com/enterprise-contract/ec-policies//policy"
        ]
      }
    ],
    "configuration": {
      "include": [
        "slsa_provenance_available"
      ]
    },
    "publicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERhr8Zj4dZW67zucg8fDr11M4lmRp\nzN6SIcIjkvH39siYg1DkCoa2h2xMUZ10ecbM3/ECqvBV55YwQ2rcIEa7XQ==\n-----END PUBLIC KEY-----"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Outputs are there:report-json - 1]
{
  "success": true,
  "components": [
    {
      "name": "",
      "containerImage": "${REGISTRY}/acceptance/okayish@sha256:${REGISTRY_acceptance/okayish:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check",
            "description": "The attestation signature matches available signing materials.",
            "title": "Attestation signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check",
            "description": "The attestation has correct syntax.",
            "title": "Attestation syntax check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check",
            "description": "The image signature matches available signing materials.",
            "title": "Image signature check passed"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/okayish}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/okayish}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY}",
  "policy": {
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---
