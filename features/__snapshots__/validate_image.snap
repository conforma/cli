[happy day with git config and yaml:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[happy day with git config and yaml:stderr - 1]

---

[JUnit and AppStudio output format:stdout - 1]
<testsuites tests="7" failures="3"><testsuite name="Unnamed (${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST})" tests="7" failures="3" errors="0" id="0" time="" timestamp="${TIMESTAMP}"><properties><property name="image" value="${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}"></property><property name="key" value="${known_PUBLIC_KEY_XML}"></property><property name="success" value="false"></property><property name="keyId" value=""></property><property name="signature" value="${IMAGE_SIGNATURE_acceptance/image}"></property></properties><testcase name="builtin.attestation.signature_check: Pass" classname="builtin.attestation.signature_check: Pass"></testcase><testcase name="builtin.attestation.syntax_check: Pass" classname="builtin.attestation.syntax_check: Pass"></testcase><testcase name="builtin.image.signature_check: Pass" classname="builtin.image.signature_check: Pass"></testcase><testcase name="main.acceptor: Pass" classname="main.acceptor: Pass"></testcase><testcase name="main.reject_with_term: Fails always (term1)" classname="main.reject_with_term: Fails always (term1)"><failure message="Fails always (term1)"><![CDATA[Fails always (term1)]]></failure></testcase><testcase name="main.reject_with_term: Fails always (term2)" classname="main.reject_with_term: Fails always (term2)"><failure message="Fails always (term2)"><![CDATA[Fails always (term2)]]></failure></testcase><testcase name="main.rejector: Fails always" classname="main.rejector: Fails always"><failure message="Fails always"><![CDATA[Fails always]]></failure></testcase></testsuite></testsuites>

---

[JUnit and AppStudio output format:stderr - 1]
Error: success criteria not met

---
[JUnit and AppStudio output format:stdout - 2]
{
  "timestamp": "${TIMESTAMP}",
  "namespace": "",
  "successes": 4,
  "failures": 3,
  "warnings": 0,
  "result": "FAILURE"
}
---
[JUnit and AppStudio output format:stderr - 2]
Error: success criteria not met

---
[policy and data sources:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Failure due to overripeness"
        },
        {
          "msg": "Failure due to spider attack"
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/banana_check.git"
        ],
        "data": [
          "git::https://${GITHOST}/git/banana_data_1.git"
        ]
      },
      {
        "policy": [
          "git::https://${GITHOST}/git/banana_check.git"
        ],
        "data": [
          "git::https://${GITHOST}/git/banana_data_2.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[policy and data sources:stderr - 1]
Error: success criteria not met

---

[inline policy:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[inline policy:stderr - 1]

---

[happy day with git config and json:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[happy day with git config and json:stderr - 1]

---

[future failure is converted to a warning:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "warnings": [
        {
          "msg": "Fails in 2099",
          "metadata": {
            "effective_on": "2099-01-01T00:00:00Z"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/future-deny-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[future failure is converted to a warning:stderr - 1]

---

[Custom rule data:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/my-policy1.git"
        ],
        "ruleData": {
          "custom": "data1"
        }
      },
      {
        "policy": [
          "git::https://${GITHOST}/git/my-policy2.git"
        ],
        "ruleData": {
          "other": "data2"
        }
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "2014-05-31T00:00:00Z"
}
---

[Custom rule data:stderr - 1]

---

[multiple policy sources with multiple source groups:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-multiple-sources@sha256:${REGISTRY_acceptance/ec-multiple-sources:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Fails always (term1)",
          "metadata": {
            "code": "main.reject_with_term"
          }
        },
        {
          "msg": "Fails always (term2)",
          "metadata": {
            "code": "main.reject_with_term"
          }
        },
        {
          "msg": "Fails always",
          "metadata": {
            "code": "main.rejector"
          }
        }
      ],
      "warnings": [
        {
          "msg": "Has a warning"
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-multiple-sources}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-multiple-sources}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/repository1.git"
        ]
      },
      {
        "policy": [
          "git::https://${GITHOST}/git/repository2.git"
        ]
      },
      {
        "policy": [
          "git::https://${GITHOST}/git/repository3.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[multiple policy sources with multiple source groups:stderr - 1]
Error: success criteria not met

---

[mismatched image digest in signature:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/bad-actor@sha256:${REGISTRY_acceptance/bad-actor:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "No image signatures found matching the given public key. Verify the correct public key was provided, and a signature was created. Error: no matching signatures: invalid or missing digest in claim: sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": false,
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/bad-actor}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/mismatched-image-digest.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[mismatched image digest in signature:stderr - 1]
Error: success criteria not met

---

[policy rule filtering:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "filtering.always_pass"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "filtering.always_pass_with_collection"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ]
      }
    ],
    "configuration": {
      "exclude": [
        "filtering.always_fail",
        "filtering.always_fail_with_collection"
      ],
      "include": [
        "@stamps",
        "filtering.always_pass"
      ]
    },
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[policy rule filtering:stderr - 1]

---

[application snapshot reference:stdout - 1]
{
  "success": true,
  "snapshot": "acceptance/happy",
  "components": [
    {
      "name": "Happy",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[application snapshot reference:stderr - 1]

---

[multiple policy sources with one source group:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-multiple-sources@sha256:${REGISTRY_acceptance/ec-multiple-sources:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Fails always (term1)",
          "metadata": {
            "code": "main.reject_with_term"
          }
        },
        {
          "msg": "Fails always (term2)",
          "metadata": {
            "code": "main.reject_with_term"
          }
        },
        {
          "msg": "Fails always",
          "metadata": {
            "code": "main.rejector"
          }
        }
      ],
      "warnings": [
        {
          "msg": "Has a warning"
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-multiple-sources}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-multiple-sources}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/repository1.git",
          "git::https://${GITHOST}/git/repository2.git",
          "git::https://${GITHOST}/git/repository3.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[multiple policy sources with one source group:stderr - 1]
Error: success criteria not met

---

[unexpected image signature cert:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/unexpected-keyless-cert@sha256:${REGISTRY_acceptance/unexpected-keyless-cert:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Image attestation check failed: no matching attestations: none of the expected identities matched what was in the certificate, got subjects [${CERT_IDENTITY}] with issuer ${CERT_ISSUER}",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Image signature check failed: no matching signatures: none of the expected identities matched what was in the certificate, got subjects [${CERT_IDENTITY}] with issuer ${CERT_ISSUER}",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false
    }
  ],
  "key": "",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/unexpected-keyless-cert.git"
        ]
      }
    ]
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[unexpected image signature cert:stderr - 1]
Error: success criteria not met

---

[invalid image signature:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/invalid-image-signature@sha256:${REGISTRY_acceptance/invalid-image-signature:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "No image attestations found matching the given public key. Verify the correct public key was provided, and one or more attestations were created. Error: no matching attestations: could not verify envelope: accepted signatures do not match threshold, Found: 0, Expected 1",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "No image signatures found matching the given public key. Verify the correct public key was provided, and a signature was created. Error: no matching signatures: searching log query: \u0026{0 } (*models.Error) is not supported by the TextConsumer, can be resolved by supporting TextUnmarshaler interface",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false
    }
  ],
  "key": "${unknown_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/invalid-image-signature.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${unknown_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[invalid image signature:stderr - 1]
Error: success criteria not met

---

[policy rule filtering for successes:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "filtering.always_pass"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ]
      }
    ],
    "configuration": {
      "exclude": [
        "filtering.always_pass_with_collection",
        "filtering.always_fail_with_collection"
      ],
      "include": [
        "@stamps",
        "filtering.always_pass"
      ]
    },
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[policy rule filtering for successes:stderr - 1]

---

[happy day with missing git config:stdout - 1]

---

[happy day with missing git config:stderr - 1]
Error: 1 error occurred:
    * No suitable config file found at git::https://${GITHOST}/git/happy-config.git



---

[using attestation time as effective time:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Fails in 2099",
          "metadata": {
            "effective_on": "2099-01-01T00:00:00Z"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/future-deny-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "2100-01-01T00:00:00Z"
}
---

[using attestation time as effective time:stderr - 1]
Error: success criteria not met

---

[inline application snapshot:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Happy",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[inline application snapshot:stderr - 1]

---

[happy day with keyless:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day-keyless@sha256:${REGISTRY_acceptance/ec-happy-day-keyless:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.no_attestation_signature_info"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.no_attestation_signer_certificate"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.no_signature_info"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.no_signer_certificate"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.unexpected_attestation_signer"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "keyless.unexpected_signer"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "${IMAGE_SIGNATURE_KEY_ID_acceptance/ec-happy-day-keyless}",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day-keyless}",
          "certificate": "-----BEGIN CERTIFICATE-----\nMIIExDCCAqygAwIBAgIUZBRgs06l5DTnJICB26hox2g0v+cwDQYJKoZIhvcNAQEL\nBQAwfjEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH\nEw1TYW4gRnJhbmNpc2NvMRYwFAYDVQQJEw01NDggTWFya2V0IFN0MQ4wDAYDVQQR\nEwU1NzI3NDEZMBcGA1UEChMQTGludXggRm91bmRhdGlvbjAeFw0yMzEwMzAxOTU5\nNDlaFw0yMzEwMzAyMDA5NDlaMAAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARp\nveOVDZPh8uuiIANma08h4XnK9rJejTDC3/vVVrU/PJsNbCW9KTmb6RXWNRBpIG2J\ntiVkpe7kugo7auhYcQLOo4IBgTCCAX0wDgYDVR0PAQH/BAQDAgeAMBMGA1UdJQQM\nMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBTM6I3xUxwuszdXgK0fgLUAg0hCgzAfBgNV\nHSMEGDAWgBQ347Yd3VY8vF36aM0ku+8SUQyTszBOBgNVHREBAf8ERDBChkBodHRw\nczovL2t1YmVybmV0ZXMuaW8vbmFtZXNwYWNlcy9kZWZhdWx0L3NlcnZpY2VhY2Nv\ndW50cy9kZWZhdWx0MDoGCisGAQQBg78wAQEELGh0dHBzOi8va3ViZXJuZXRlcy5k\nZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsMIGJBgorBgEEAdZ5AgQCBHsEeQB3AHUA\n67YOflkmEY3JvJ3moHn4p3gnu3c8k2ZZnu4slqzdKUgAAAGLgivHtAAABAMARjBE\nAiA03LiAQ60sXX/fBC4dyafXeC9yLlchRU6sCKsmPf4RGgIgCyikK1ArBz4b+gNQ\n3tqYcLyYgTFGeg+vt2c3pwiju84wDQYJKoZIhvcNAQELBQADggIBAHriU4fliiGe\naLV069F+o0ZEQZnaE8CRiZHeYoIV1nITg60GGfqCKQeW2+pSPkiPMx6+P2VbJHcU\nOom9kMI3g8qgFVc8gLrKrZlDjD0f6MNsZl+SwCok4+9khFVKMvoqJzRZztODYuob\nqx4CUgBRXQAGp8+5mJu6olxR6G5HKUkZaSXo9zl2esiGfxbL4ah3DXVom/zd/Yyq\nVg7qWCLFWLwDvjQ1c9QCo1+NuEYBEz459pfv2z3ZYWke89jjRql1yoBfEUt5pvbN\nVKkJCshplmX2nUP7a1lEPfByjZiUJ9jnzWVQq9XOo+33v3UcIS4WbEgshpCkuJwJ\nCbq2pTenZzhG/cOkyaMCl7qfiyIj4Ogxu7tFDDESLHDQYpWD+fTPFfD/w7f1Fp71\ndWcLl3vro7m4OKq4ill1A/2+8Kzmfl2XWXLtOIQ7bsRyErhGAlCNZkbEehEKc1Ra\nyu1v6cDIN+v6Sg8pMqySBEHzGOxpbrnffFDu9GjGuyP1Rgzoz4Sp/gLng3tgdrG9\nIGoKSK8XIrX6eA3y+z4TzdBDeIQN2eP9he32zA8W3yzePiNwXNLHM12JOR+MFjVu\nqxKOInOjdikwG1lUoWl06pu6N6laCq1cP4I7dAx6Vb/vVAhQw69IBz/pWr1Put9K\nH6rhzwcaMMAm1M/MN1Q7fdflwGvZL9mq\n-----END CERTIFICATE-----\n",
          "chain": [
            "-----BEGIN CERTIFICATE-----\n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\n-----END CERTIFICATE-----\n"
          ],
          "metadata": {
            "Fulcio Issuer": "${CERT_ISSUER}",
            "Issuer": "O=Linux Foundation,POSTALCODE=57274,STREET=548 Market St,L=San Francisco,ST=California,C=USA",
            "Not After": "${TIMESTAMP}",
            "Not Before": "${TIMESTAMP}",
            "Serial Number": "641460b34ea5e434e7248081dba868c76834bfe7",
            "Subject Alternative Name": "URIs:${CERT_IDENTITY}"
          }
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "tekton.dev/v1/PipelineRun",
          "signatures": [
            {
              "keyid": "${ATTESTATION_SIGNATURE_KEY_ID_acceptance/ec-happy-day-keyless}",
              "sig": "MEUCIDb88bJAPJejiMbSsrHRoq/qW1kfNaHWBUj6Tx20TKUpAiEAmsSRhLo6geXjDXJoqVMhkQ3U9twgCozGsyo2e7Hcq2M=",
              "certificate": "-----BEGIN CERTIFICATE-----\nMIIExTCCAq2gAwIBAgIUcEVIGht2hvDRLWwkKqqAKBWSlYYwDQYJKoZIhvcNAQEL\nBQAwfjEMMAoGA1UEBhMDVVNBMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQH\nEw1TYW4gRnJhbmNpc2NvMRYwFAYDVQQJEw01NDggTWFya2V0IFN0MQ4wDAYDVQQR\nEwU1NzI3NDEZMBcGA1UEChMQTGludXggRm91bmRhdGlvbjAeFw0yMzEwMzAxOTU5\nNTFaFw0yMzEwMzAyMDA5NTFaMAAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATX\nLl4UDdFUNEXIkW3+3QGE2/dpZISFoyvwN+bpa154WG5GQOUwvXGD4AzEjXDteVFd\nvxKCz8mLiuLsTT8VSnRRo4IBgjCCAX4wDgYDVR0PAQH/BAQDAgeAMBMGA1UdJQQM\nMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBR4QE3y6csxrx5gbJwDurBjikcaKTAfBgNV\nHSMEGDAWgBQ347Yd3VY8vF36aM0ku+8SUQyTszBOBgNVHREBAf8ERDBChkBodHRw\nczovL2t1YmVybmV0ZXMuaW8vbmFtZXNwYWNlcy9kZWZhdWx0L3NlcnZpY2VhY2Nv\ndW50cy9kZWZhdWx0MDoGCisGAQQBg78wAQEELGh0dHBzOi8va3ViZXJuZXRlcy5k\nZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsMIGKBgorBgEEAdZ5AgQCBHwEegB4AHYA\n67YOflkmEY3JvJ3moHn4p3gnu3c8k2ZZnu4slqzdKUgAAAGLgivR/AAABAMARzBF\nAiEA2a/1cZZzHvcn3Lm+WruTACvuu9QgUdn7yP6m87ux+TICIAdJbsQYPurV5V7N\nabb4zYkY7w8Co+QLzMCTCPa4lf3gMA0GCSqGSIb3DQEBCwUAA4ICAQAHXM4FkAx6\n/8evfsywGSLcwqj1gfijp4jZr/MqUoqeDZBtzuYRUassQIbKUU0RBO+dzXv1enx0\nN5JHp49NGGrwq4yHB2RETMOose2kzlAdjT7XQQlUnTwBamTEUwVxK+3Wsy6suJLE\nr8YqTPa/5k0e4rt5mywkahvExgC+dDHYYlqjcqVdVuivIg1o6t1IOQdoDSLZU5Ig\nxxIX3SAdh26VYnrr8TGiagFskTJt+gNmDFY/EWNCFOJEr+bCP1Glb19REasvPJYL\nVzOlBAg7+FH7chqvKUPs18zlrbkPQ4EZodZJWpJvWBsRB47h3A3u7J03tULXhpKl\nF3JPIu7x7oagbNVxZ7dbSeHTlGCCih6KHJRxdrMME3cV4GbxxH5Pqc1M1GmiLzr5\nt7rufTIV9MUuVT0HcPqE1e7jJzumiabjh6HYPFs5qgm4m2mcrKHZQV45wPKimzNR\niMI/FdZEtzvSJEprmVxjIbufQJfwT4jby/CecGwHJJqef8B805+15SYeryAGvBb1\ncYuSlpmkBqIF7Y6Px9UaHTLklFqvE5VrjQIHmq66TNAFatQr/hQP2MLrgDkdZ9x0\nyWFk8L46uyC4Le0L/AS/4AZnqHBNp72DXZx1HsyR6MOjo9cwYPS8vxH5MwMYFkS1\nkDsBgRzpq2cTlld47TxdfTxF3mlkE9nyUA==\n-----END CERTIFICATE-----\n",
              "chain": [
                "-----BEGIN CERTIFICATE-----\n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\n-----END CERTIFICATE-----\n"
              ],
              "metadata": {
                "Fulcio Issuer": "${CERT_ISSUER}",
                "Issuer": "O=Linux Foundation,POSTALCODE=57274,STREET=548 Market St,L=San Francisco,ST=California,C=USA",
                "Not After": "${TIMESTAMP}",
                "Not Before": "${TIMESTAMP}",
                "Serial Number": "7045481a1b7686f0d12d6c242aaa802815929586",
                "Subject Alternative Name": "URIs:${CERT_IDENTITY}"
              }
            }
          ]
        }
      ]
    }
  ],
  "key": "",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ]
      }
    ]
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[happy day with keyless:stderr - 1]

---

[mismatched image digest in attestation:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/bad-actor@sha256:${REGISTRY_acceptance/bad-actor:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "No image attestations found matching the given public key. Verify the correct public key was provided, and one or more attestations were created. Error: no matching attestations: no matching subject digest found",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/mismatched-image-digest.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[mismatched image digest in attestation:stderr - 1]
Error: success criteria not met

---

[artifact relocation:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/destination@sha256:${REGISTRY_IMAGE_acceptance/destination:latest|acceptance/source:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/source}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/source}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[artifact relocation:stderr - 1]

---
[detailed failures output:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Fails always (term1)",
          "metadata": {
            "code": "main.reject_with_term",
            "collections": [
              "A"
            ],
            "description": "This rule will always fail. To exclude this rule add \"main.reject_with_term:term1\" to the `exclude` section of the policy configuration.",
            "solution": "None",
            "term": "term1",
            "title": "Reject with term rule"
          }
        },
        {
          "msg": "Fails always (term2)",
          "metadata": {
            "code": "main.reject_with_term",
            "collections": [
              "A"
            ],
            "description": "This rule will always fail. To exclude this rule add \"main.reject_with_term:term2\" to the `exclude` section of the policy configuration.",
            "solution": "None",
            "term": "term2",
            "title": "Reject with term rule"
          }
        },
        {
          "msg": "Fails always",
          "metadata": {
            "code": "main.rejector",
            "collections": [
              "A"
            ],
            "description": "This rule will always fail. To exclude this rule add \"main.rejector\" to the `exclude` section of the policy configuration.",
            "solution": "None",
            "title": "Reject rule"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check",
            "description": "The attestation signature matches available signing materials.",
            "title": "Attestation signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check",
            "description": "The attestation has correct syntax.",
            "title": "Attestation syntax check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check",
            "description": "The image signature matches available signing materials.",
            "title": "Image signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor",
            "collections": [
              "A"
            ],
            "description": "This rule will never fail",
            "title": "Allow rule"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[detailed failures output:stderr - 1]
Error: success criteria not met

---

[future failure is a deny when using effective-date flag:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Fails in 2099",
          "metadata": {
            "effective_on": "2099-01-01T00:00:00Z"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/future-deny-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "2100-01-01T12:00:00Z"
}
---

[future failure is a deny when using effective-date flag:stderr - 1]
Error: success criteria not met

---

[Using OCI bundles:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/my-image@sha256:${REGISTRY_acceptance/my-image:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/my-image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/my-image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "oci::https://${REGISTRY}/acceptance/happy-day-policy:tag",
          "oci::${REGISTRY}/acceptance/allow-all:latest"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Using OCI bundles:stderr - 1]

---

[Dropping rego capabilities:stdout - 1]

---

[Dropping rego capabilities:stderr - 1]
Error: 1 error occurred:
    * error validating image ${REGISTRY}/acceptance/ec-happy-day of component Unnamed: load: loading policies: get compiler: 3 errors occurred:
${TEMP}/ec-work-${RANDOM}/policy/${RANDOM}/main.rego:15: rego_type_error: undefined function opa.runtime
${TEMP}/ec-work-${RANDOM}/policy/${RANDOM}/main.rego:23: rego_type_error: undefined function http.send
${TEMP}/ec-work-${RANDOM}/policy/${RANDOM}/main.rego:34: rego_type_error: undefined function net.lookup_ip_addr



---

[happy day:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[happy day:stderr - 1]

---

[rule dependencies:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Failure",
          "metadata": {
            "code": "pkg.fails"
          }
        }
      ],
      "warnings": [
        {
          "msg": "Warning",
          "metadata": {
            "code": "pkg.warns"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/with-dependencies.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[rule dependencies:stderr - 1]
Error: success criteria not met

---

[successes are not duplicated:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/unique-successes@sha256:${REGISTRY_acceptance/unique-successes:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "Always fails",
          "metadata": {
            "code": "gloomy.sad"
          }
        }
      ],
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "gloomy.happy"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.acceptor"
          }
        }
      ],
      "success": false,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/unique-successes}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/unique-successes}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/unique-successes.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[successes are not duplicated:stderr - 1]

---

[Custom rule data:${TMPDIR}/custom-rule-data.yaml - 1]
- - config:
      policy:
        when_ns: 1401494400000000000
    rule_data__configuration__:
      custom: data1
  - config:
      policy:
        when_ns: 1401494400000000000
    rule_data__configuration__:
      other: data2

---

[image config:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image-config@sha256:${REGISTRY_acceptance/image-config:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check",
            "description": "The attestation signature matches available signing materials.",
            "title": "Attestation signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check",
            "description": "The attestation has correct syntax.",
            "title": "Attestation syntax check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check",
            "description": "The image signature matches available signing materials.",
            "title": "Image signature check passed"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "image_config.image_distinct_title_set",
            "description": "Check if the image has a different value than its parent image for the org.opencontainers.image.title label.",
            "title": "Image Distinct Title Label"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "image_config.image_title_set",
            "description": "Check if the image has the org.opencontainers.image.title label set.",
            "title": "Image Title Label"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "image_config.parent_image_title_set",
            "description": "Check if the parent image has the org.opencontainers.image.title label set.",
            "title": "Parent Image Title Label"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image-config}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image-config}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/image-config-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[image config:stderr - 1]

---

[Output attestations:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/my-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Output attestations:stderr - 1]

---

[Output attestations:${TMPDIR}/attestation.jsonl - 1]
{
  "_type": "https://in-toto.io/Statement/v0.1",
  "predicateType": "https://slsa.dev/provenance/v0.2",
  "subject": [
    {
      "name": "acceptance/image",
      "digest": {
        "sha256": "${REGISTRY_acceptance/image:latest_DIGEST}"
      }
    }
  ],
  "predicate": {
    "builder": {
      "id": "https://tekton.dev/chains/v2"
    },
    "buildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
    "invocation": {
      "configSource": {}
    }
  }
}
---

[policy input output:stdout - 1]
{
  "attestations": [
    {
      "statement": {
        "_type": "https://in-toto.io/Statement/v0.1",
        "predicateType": "https://slsa.dev/provenance/v0.2",
        "subject": [
          {
            "name": "acceptance/policy-input-output",
            "digest": {
              "sha256": "${REGISTRY_acceptance/policy-input-output:latest_DIGEST}"
            }
          }
        ],
        "predicate": {
          "builder": {
            "id": "https://tekton.dev/chains/v2"
          },
          "buildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "invocation": {
            "configSource": {}
          }
        }
      },
      "signatures": [
        {
          "keyid": "",
          "sig": "${ATTESTATION_SIGNATURE_acceptance/policy-input-output}"
        }
      ]
    }
  ],
  "image": {
    "ref": "${REGISTRY}/acceptance/policy-input-output@sha256:${REGISTRY_acceptance/policy-input-output:latest_DIGEST}",
    "signatures": [
      {
        "keyid": "",
        "sig": "${IMAGE_SIGNATURE_acceptance/policy-input-output}"
      }
    ],
    "config": {
      "Labels": {
        "org.opencontainers.image.title": "acceptance/policy-input-output"
      }
    },
    "parent": {
      "ref": "${REGISTRY}/acceptance/policy-input-output/parent:latest@sha256:${REGISTRY_acceptance/policy-input-output/parent:latest_DIGEST}",
      "config": {
        "Labels": {
          "org.opencontainers.image.title": "acceptance/policy-input-output/parent"
        }
      }
    },
    "source": {}
  }
}
---

[policy input output:stderr - 1]

---

[ignore rekor:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ignore-rekor@sha256:${REGISTRY_acceptance/ignore-rekor:latest_DIGEST}",
      "source": {},
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ignore-rekor}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ignore-rekor}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/ignore-rekor.git"
        ]
      }
    ],
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[ignore rekor:stderr - 1]

---

[rekor entries required:stdout - 1]
{
  "success": false,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/rekor-by-default@sha256:${REGISTRY_acceptance/rekor-by-default:latest_DIGEST}",
      "source": {},
      "violations": [
        {
          "msg": "No image attestations found matching the given public key. Verify the correct public key was provided, and one or more attestations were created. Error: no matching attestations: searching log query: \u0026{0 } (*models.Error) is not supported by the TextConsumer, can be resolved by supporting TextUnmarshaler interface",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "No image signatures found matching the given public key. Verify the correct public key was provided, and a signature was created. Error: no matching signatures: searching log query: \u0026{0 } (*models.Error) is not supported by the TextConsumer, can be resolved by supporting TextUnmarshaler interface",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": false
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/rekor-by-default.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[rekor entries required:stderr - 1]
Error: success criteria not met

---

[OLM manifests:stderr - 1]

---

[OLM manifests:${TMPDIR}/input.json - 1]
{
  "attestations": [
    {
      "statement": {
        "_type": "https://in-toto.io/Statement/v0.1",
        "predicateType": "https://slsa.dev/provenance/v0.2",
        "subject": [
          {
            "name": "acceptance/image",
            "digest": {
              "sha256": "${REGISTRY_acceptance/image:latest_DIGEST}"
            }
          }
        ],
        "predicate": {
          "builder": {
            "id": "https://tekton.dev/chains/v2"
          },
          "buildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "invocation": {
            "configSource": {}
          }
        }
      },
      "signatures": [
        {
          "keyid": "",
          "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
        }
      ]
    }
  ],
  "image": {
    "ref": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
    "signatures": [
      {
        "keyid": "",
        "sig": "${IMAGE_SIGNATURE_acceptance/image}"
      }
    ],
    "config": {
      "Labels": {
        "operators.operatorframework.io.bundle.manifests.v1": "manifests/",
        "org.opencontainers.image.title": "acceptance/image"
      }
    },
    "files": {
      "manifests/some.clusterserviceversion.yaml": {
        "apiVersion": "operators.coreos.com/v1alpha1",
        "kind": "ClusterServiceVersion",
        "metadata": {
          "annotations": null,
          "name": "memcached-operator.v0.10.0"
        },
        "spec": {
          "customresourcedefinitions": {
            "owned": [
              {
                "kind": "Memcached",
                "name": "memcacheds.cache.example.com",
                "version": "v1alpha1"
              }
            ],
            "required": [
              {
                "kind": "Other",
                "name": "others.example.com",
                "version": "v1alpha1"
              }
            ]
          },
          "description": "This is an operator for memcached.",
          "displayName": "Memcached Operator",
          "install": {
            "spec": {
              "clusterPermissions": [
                {
                  "rules": [
                    {
                      "apiGroups": [
                        ""
                      ],
                      "resources": [
                        "serviceaccounts"
                      ],
                      "verbs": [
                        "*"
                      ]
                    }
                  ],
                  "serviceAccountName": "memcached-operator"
                }
              ],
              "deployments": [
                {
                  "name": "memcached-operator",
                  "spec": {
                    "replicas": 1
                  }
                }
              ],
              "permissions": [
                {
                  "rules": [
                    {
                      "apiGroups": [
                        ""
                      ],
                      "resources": [
                        "pods"
                      ],
                      "verbs": [
                        "*"
                      ]
                    }
                  ],
                  "serviceAccountName": "memcached-operator"
                }
              ]
            },
            "strategy": "deployment"
          },
          "installModes": [
            {
              "supported": true,
              "type": "OwnNamespace"
            },
            {
              "supported": true,
              "type": "SingleNamespace"
            },
            {
              "supported": false,
              "type": "MultiNamespace"
            },
            {
              "supported": true,
              "type": "AllNamespaces"
            }
          ],
          "keywords": [
            "memcached",
            "app"
          ],
          "maintainers": [
            {
              "email": "corp@example.com",
              "name": "Some Corp"
            }
          ],
          "maturity": "alpha",
          "minKubeVersion": "1.16.0",
          "provider": {
            "name": "Example",
            "url": "www.example.com"
          },
          "version": "0.10.0"
        }
      },
      "manifests/some.crd.yaml": {
        "apiVersion": "apiextensions.k8s.io/v1",
        "kind": "CustomResourceDefinition",
        "metadata": {
          "annotations": {
            "controller-gen.kubebuilder.io/version": "v0.4.1"
          },
          "name": "memcacheds.cache.example.com"
        },
        "spec": {
          "group": "cache.example.com",
          "names": {
            "kind": "Memcached",
            "listKind": "MemcachedList",
            "plural": "memcacheds",
            "singular": "memcached"
          },
          "scope": "Namespaced",
          "versions": [
            {
              "name": "v1alpha1",
              "schema": {
                "openAPIV3Schema": {
                  "description": "Memcached is the Schema for the memcacheds API",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object"
                    },
                    "spec": {
                      "description": "MemcachedSpec defines the desired state of Memcached",
                      "properties": {
                        "size": {
                          "description": "Size defines the number of Memcached instances",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "MemcachedStatus defines the observed state of Memcached",
                      "properties": {
                        "nodes": {
                          "description": "Nodes store the name of the pods which are running Memcached instances",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "served": true,
              "storage": true,
              "subresources": {
                "status": {}
              }
            }
          ]
        },
        "status": {
          "acceptedNames": {
            "kind": "",
            "plural": ""
          },
          "conditions": [],
          "storedVersions": []
        }
      }
    },
    "source": {}
  }
}
---

[OLM manifests:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "olm_manifests.olm_manifest_csv"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "olm_manifests.olm_manifests"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/olm-manifests.git"
        ]
      }
    ],
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Red Hat manifests:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "main.redhat_manifests"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/image}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/redhat-manifests.git"
        ]
      }
    ],
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[Red Hat manifests:stderr - 1]

---

[Red Hat manifests:${TMPDIR}/input.json - 1]
{
  "attestations": [
    {
      "statement": {
        "_type": "https://in-toto.io/Statement/v0.1",
        "predicateType": "https://slsa.dev/provenance/v0.2",
        "subject": [
          {
            "name": "acceptance/image",
            "digest": {
              "sha256": "${REGISTRY_acceptance/image:latest_DIGEST}"
            }
          }
        ],
        "predicate": {
          "builder": {
            "id": "https://tekton.dev/chains/v2"
          },
          "buildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "invocation": {
            "configSource": {}
          }
        }
      },
      "signatures": [
        {
          "keyid": "",
          "sig": "${ATTESTATION_SIGNATURE_acceptance/image}"
        }
      ]
    }
  ],
  "image": {
    "ref": "${REGISTRY}/acceptance/image@sha256:${REGISTRY_acceptance/image:latest_DIGEST}",
    "signatures": [
      {
        "keyid": "",
        "sig": "${IMAGE_SIGNATURE_acceptance/image}"
      }
    ],
    "config": {
      "Labels": {
        "org.opencontainers.image.title": "acceptance/image",
        "vendor": "Red Hat, Inc."
      }
    },
    "files": {
      "root/buildinfo/content_manifests/sbom-cyclonedx.json": {
        "bomFormat": "CycloneDX",
        "components": [
          {
            "bom-ref": "pkg:rpm/rhel/elfutils-default-yama-scope@0.186-1.el8?arch=noarch\u0026upstream=elfutils-0.186-1.el8.src.rpm\u0026distro=rhel-8.6\u0026package-id=c064acc6509932eb",
            "cpe": "cpe:2.3:a:elfutils-default-yama-scope:elfutils-default-yama-scope:0.186-1.el8:*:*:*:*:*:*:*",
            "name": "elfutils-default-yama-scope",
            "properties": [
              {
                "name": "syft:package:foundBy",
                "value": "rpmdb-cataloger"
              },
              {
                "name": "syft:package:metadataType",
                "value": "RpmdbMetadata"
              },
              {
                "name": "syft:package:type",
                "value": "rpm"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils-default-yama-scope:elfutils_default_yama_scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils_default_yama_scope:elfutils-default-yama-scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils_default_yama_scope:elfutils_default_yama_scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils-default-yama:elfutils-default-yama-scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils-default-yama:elfutils_default_yama_scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils_default_yama:elfutils-default-yama-scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils_default_yama:elfutils_default_yama_scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils-default:elfutils-default-yama-scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils-default:elfutils_default_yama_scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils_default:elfutils-default-yama-scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils_default:elfutils_default_yama_scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils:elfutils-default-yama-scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:elfutils:elfutils_default_yama_scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:redhat:elfutils-default-yama-scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:cpe23",
                "value": "cpe:2.3:a:redhat:elfutils_default_yama_scope:0.186-1.el8:*:*:*:*:*:*:*"
              },
              {
                "name": "syft:location:0:path",
                "value": "var/lib/rpm/Packages"
              },
              {
                "name": "syft:metadata:release",
                "value": "1.el8"
              },
              {
                "name": "syft:metadata:size",
                "value": "1810"
              },
              {
                "name": "syft:metadata:sourceRpm",
                "value": "elfutils-0.186-1.el8.src.rpm"
              }
            ],
            "publisher": "Red Hat, Inc.",
            "purl": "pkg:rpm/rhel/elfutils-default-yama-scope@0.186-1.el8?arch=noarch\u0026upstream=elfutils-0.186-1.el8.src.rpm\u0026distro=rhel-8.6",
            "type": "library",
            "version": "0.186-1.el8"
          }
        ],
        "metadata": {
          "component": {
            "bom-ref": "7ec463778bb0fefe",
            "name": "/var/lib/containers/storage/vfs/dir/d698970a5f3bc0524df49e6ccb4c6845e5183b8ccb95a1a77b43284752de9e19",
            "type": "file"
          },
          "timestamp": "${TIMESTAMP}",
          "tools": [
            {
              "name": "syft",
              "vendor": "anchore",
              "version": "0.47.0"
            }
          ]
        },
        "serialNumber": "urn:uuid:00c4ffbc-0010-41d5-894a-c0404f691594",
        "specVersion": "1.4",
        "version": 1
      },
      "root/buildinfo/content_manifests/sbom-purl.json": {
        "image_contents": {
          "dependencies": [
            {
              "purl": "pkg:rpm/rhel/elfutils-default-yama-scope@0.186-1.el8?arch=noarch\u0026upstream=elfutils-0.186-1.el8.src.rpm\u0026distro=rhel-8.6"
            },
            {
              "purl": "pkg:rpm/rhel/gdb-gdbserver@8.2-18.el8?arch=x86_64\u0026upstream=gdb-8.2-18.el8.src.rpm\u0026distro=rhel-8.6"
            }
          ]
        }
      }
    },
    "source": {}
  }
}
---

[Unsupported policies:stdout - 1]

---

[Unsupported policies:stderr - 1]
Error: 1 error occurred:
    * error validating image ${REGISTRY}/acceptance/image of component Unnamed: the rule "deny = true { true }" returns an unsupported value, at main.rego:3



---

[fetch OCI blob:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/fetch-oci-blob@sha256:${REGISTRY_acceptance/fetch-oci-blob:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "blobby.fetchable"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "blobby.spam"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/fetch-oci-blob}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/fetch-oci-blob}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/fetch-oci-blob-policy.git"
        ]
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[fetch OCI blob:stderr - 1]

---

[policy rule filtering per source:stdout - 1]
{
  "success": true,
  "components": [
    {
      "name": "Unnamed",
      "containerImage": "${REGISTRY}/acceptance/ec-happy-day@sha256:${REGISTRY_acceptance/ec-happy-day:latest_DIGEST}",
      "source": {},
      "successes": [
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.attestation.syntax_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "builtin.image.signature_check"
          }
        },
        {
          "msg": "Pass",
          "metadata": {
            "code": "filtering.always_pass"
          }
        }
      ],
      "success": true,
      "signatures": [
        {
          "keyid": "",
          "sig": "${IMAGE_SIGNATURE_acceptance/ec-happy-day}"
        }
      ],
      "attestations": [
        {
          "type": "https://in-toto.io/Statement/v0.1",
          "predicateType": "https://slsa.dev/provenance/v0.2",
          "predicateBuildType": "https://tekton.dev/attestations/chains/pipelinerun@v2",
          "signatures": [
            {
              "keyid": "",
              "sig": "${ATTESTATION_SIGNATURE_acceptance/ec-happy-day}"
            }
          ]
        }
      ]
    }
  ],
  "key": "${known_PUBLIC_KEY_JSON}",
  "policy": {
    "sources": [
      {
        "policy": [
          "git::https://${GITHOST}/git/happy-day-policy.git"
        ],
        "config": {
          "exclude": [
            "filtering.always_pass_with_collection",
            "filtering.always_fail_with_collection"
          ],
          "include": [
            "@stamps",
            "filtering.always_pass"
          ]
        }
      }
    ],
    "rekorUrl": "${REKOR}",
    "publicKey": "${known_PUBLIC_KEY}"
  },
  "ec-version": "${EC_VERSION}",
  "effective-time": "${TIMESTAMP}"
}
---

[policy rule filtering per source:stderr - 1]

---
